# ================================================
# ARCONTE - PRODUCCIÓN
# Configuración de variables de entorno
# ================================================
# IMPORTANTE: Copia este archivo a .env.production y completa los valores
# NO COMMITEAR .env.production en Git
# ================================================

# ================================================
# 1. APLICACIÓN
# ================================================

# Nombre de la aplicación
# Usado en: Emails, logs, interfaz
APP_NAME="Arconte"

# Entorno de la aplicación
# Valores: local, staging, production
# ⚠️ CRÍTICO: DEBE ser "production" en servidor
APP_ENV=production

# Modo debug
# ⚠️ CRÍTICO: DEBE ser "false" en producción (expone información sensible)
APP_DEBUG=false

# URL principal de la aplicación
# Usado en: Generación de enlaces, CORS, emails
# Ejemplo: https://arconte.com o https://app.arconte.com
# ⚠️ CRÍTICO: Debe coincidir con tu dominio real
APP_URL=https://arconte.com

# Clave de encriptación de Laravel
# ⚠️ CRÍTICO: Generar con: docker-compose exec api php artisan key:generate --show
# Formato: base64:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
# ⚠️ NO CAMBIAR después del primer despliegue (corrompe datos encriptados)
APP_KEY=base64:your_generated_app_key_here

# Versión de la aplicación
# Usado en: Logs, monitoring, rollbacks
# Formato recomendado: 1.0.0 (SemVer)
VERSION=1.0.0

# ================================================
# 2. BASE DE DATOS - PostgreSQL
# ================================================

# Tipo de conexión
# ⚠️ NO CAMBIAR: Arconte usa PostgreSQL
DB_CONNECTION=pgsql

# Host de la base de datos
# En Docker Compose: "postgres" (nombre del servicio)
# En servidor externo: IP o dominio del servidor
DB_HOST=postgres

# Puerto de PostgreSQL
# Default: 5432
DB_PORT=5432

# Nombre de la base de datos
# Recomendado: arconte_prod
DB_DATABASE=arconte

# Usuario de la base de datos
# Recomendado: arconte_user
# ⚠️ NO usar "postgres" en producción
DB_USERNAME=arconte

# Contraseña de la base de datos
# ⚠️ CRÍTICO: Usar contraseña fuerte (min 16 caracteres)
# Generar con: openssl rand -base64 32
DB_PASSWORD=your_secure_database_password_here

# ================================================
# 3. CACHE Y SESIONES - Redis
# ================================================

# Host de Redis
# En Docker Compose: "redis" (nombre del servicio)
REDIS_HOST=redis

# Puerto de Redis
# Default: 6379
REDIS_PORT=6379

# Contraseña de Redis
# ⚠️ CRÍTICO: Usar contraseña fuerte
# Generar con: openssl rand -base64 32
REDIS_PASSWORD=your_secure_redis_password_here

# Driver de cache
# Recomendado: redis (mejor performance)
# Alternativas: file, database
CACHE_DRIVER=redis

# Driver de sesiones
# Recomendado: redis
CACHE_PREFIX=arconte_cache

# ================================================
# 4. SESIONES
# ================================================

# Driver de sesiones
# Recomendado: redis (mejor performance y permite múltiples servidores)
SESSION_DRIVER=redis

# Tiempo de vida de sesión (minutos)
# Default: 120 (2 horas)
SESSION_LIFETIME=120

# Dominio de la cookie de sesión
# Permite compartir sesión entre subdominios
# Ejemplo: .arconte.com (incluye www.arconte.com, api.arconte.com, etc)
SESSION_DOMAIN=.arconte.com

# Cookie segura (solo HTTPS)
# ⚠️ CRÍTICO: DEBE ser "true" en producción con SSL
SESSION_SECURE_COOKIE=true

# SameSite cookie policy
# Valores: lax, strict, none
# Recomendado: lax
SESSION_SAME_SITE=lax

# ================================================
# 5. COLAS (QUEUES)
# ================================================

# Conexión de cola
# Recomendado: redis
# Alternativas: database, sync (no recomendado en producción)
QUEUE_CONNECTION=redis

# Nombre de la cola
# Default: default
QUEUE_NAME=default

# ================================================
# 6. CORREO ELECTRÓNICO
# ================================================

# Proveedor de correo
# Recomendado: smtp (compatible con Resend, SendGrid, etc)
MAIL_MAILER=smtp

# Host SMTP
# Resend: smtp.resend.com
# SendGrid: smtp.sendgrid.net
# Amazon SES: email-smtp.us-east-1.amazonaws.com
MAIL_HOST=smtp.resend.com

# Puerto SMTP
# TLS: 587
# SSL: 465
MAIL_PORT=587

# Usuario SMTP
# Resend: "resend"
# SendGrid: "apikey"
# Otros: tu usuario o email
MAIL_USERNAME=resend

# Contraseña/API Key SMTP
# Resend: Tu API Key de https://resend.com/api-keys
# ⚠️ CRÍTICO: Obtener de tu proveedor de email
# Dónde conseguir (Resend):
#   1. Ir a https://resend.com/api-keys
#   2. Crear nuevo API Key
#   3. Copiar el valor (empieza con "re_")
MAIL_PASSWORD=your_resend_api_key

# Encriptación
# Valores: tls, ssl
# Recomendado: tls (puerto 587)
MAIL_ENCRYPTION=tls

# Email del remitente
# ⚠️ IMPORTANTE: Debe ser un dominio verificado en tu proveedor
# Resend: Verificar dominio en https://resend.com/domains
MAIL_FROM_ADDRESS=noreply@arconte.com

# Nombre del remitente
# Aparece como "De: Arconte <noreply@arconte.com>"
MAIL_FROM_NAME="${APP_NAME}"

# ================================================
# 7. FRONTEND
# ================================================

# URL del frontend
# Usado en: CORS, redirecciones, emails
# Ejemplo: https://arconte.com o https://app.arconte.com
FRONTEND_URL=https://arconte.com

# URLs permitidas para CORS
# Separadas por coma
# Incluir: frontend, subdominios adicionales
SANCTUM_STATEFUL_DOMAINS=arconte.com,www.arconte.com

# ================================================
# 8. APIS EXTERNAS
# ================================================

# --- Google Gemini AI ---
# Usado en: Análisis de documentos, asistente legal
# Dónde conseguir:
#   1. Ir a https://makersuite.google.com/app/apikey
#   2. Crear nuevo API key
#   3. Copiar el valor
# ⚠️ CRÍTICO: Necesario para funcionalidad de IA
GEMINI_API_KEY=your_gemini_api_key_here

# Modelo de Gemini a usar
# Opciones: gemini-pro, gemini-pro-vision
GEMINI_MODEL=gemini-pro

# --- ePayco Payment Gateway ---
# Usado en: Procesamiento de pagos
# Dónde conseguir:
#   1. Ir a https://dashboard.epayco.co
#   2. Integración > Llaves API
#   3. Copiar Public Key y Private Key
# ⚠️ CRÍTICO: Necesario para procesar pagos

# Public Key (P_CUST_XXXX)
EPAYCO_PUBLIC_KEY=your_epayco_public_key

# Private Key
EPAYCO_PRIVATE_KEY=your_epayco_private_key

# Modo test
# ⚠️ CRÍTICO: DEBE ser "false" en producción
# true = Pagos de prueba
# false = Pagos reales
EPAYCO_TEST=false

# URL de respuesta de ePayco
# URL donde ePayco enviará confirmaciones de pago
EPAYCO_RESPONSE_URL=https://arconte.com/api/payments/epayco/response

# URL de confirmación
EPAYCO_CONFIRMATION_URL=https://arconte.com/api/payments/epayco/confirmation

# ================================================
# 9. SEGURIDAD
# ================================================

# --- Sanctum (API Authentication) ---
# Dominios que pueden hacer requests autenticados
# Separados por coma, sin espacios
# ⚠️ IMPORTANTE: Debe coincidir con FRONTEND_URL
SANCTUM_STATEFUL_DOMAINS=arconte.com,www.arconte.com

# --- CORS (Cross-Origin Resource Sharing) ---
# Paths que permiten CORS
# Default: api/*, sanctum/csrf-cookie
CORS_ALLOWED_ORIGINS=https://arconte.com,https://www.arconte.com

# --- Rate Limiting ---
# Límite de requests por minuto por IP
# Default: 60
RATE_LIMIT_PER_MINUTE=60

# Límite de requests de login por minuto
# Default: 5
LOGIN_RATE_LIMIT=5

# --- Trusted Proxies ---
# Si usas Cloudflare, nginx, load balancer
# Valores: *, IP específica, múltiples IPs separadas por coma
# Cloudflare: * (confiar en todos los proxies)
TRUSTED_PROXIES=*

# Headers del proxy
# Default: HEADER_X_FORWARDED_ALL
TRUSTED_PROXY_HEADERS=HEADER_X_FORWARDED_ALL

# ================================================
# 10. LOGGING Y MONITORING
# ================================================

# Canal de logs
# Opciones: stack, single, daily, slack, syslog
# Recomendado: daily (un archivo por día)
LOG_CHANNEL=daily

# Nivel de log
# Opciones: debug, info, notice, warning, error, critical, alert, emergency
# Producción: warning (solo errores importantes)
# Staging: info
LOG_LEVEL=warning

# Días de retención de logs
# Default: 14 días
LOG_DAILY_DAYS=14

# ================================================
# 11. ALMACENAMIENTO
# ================================================

# Filesystem driver
# Opciones: local, s3, ftp
# Producción: s3 (recomendado para escalabilidad)
# Desarrollo/Staging: local
FILESYSTEM_DISK=local

# --- AWS S3 (Opcional, si usas S3) ---
# AWS_ACCESS_KEY_ID=your_aws_access_key
# AWS_SECRET_ACCESS_KEY=your_aws_secret_key
# AWS_DEFAULT_REGION=us-east-1
# AWS_BUCKET=arconte-files
# AWS_USE_PATH_STYLE_ENDPOINT=false

# ================================================
# 12. BACKUPS
# ================================================

# Habilitar backups automáticos
# true = Backups diarios automáticos
BACKUP_ENABLED=true

# Retención de backups (días)
BACKUP_RETENTION_DAYS=30

# Destino de backups
# Opciones: local, s3
BACKUP_DESTINATION=local

# ================================================
# 13. PERFORMANCE
# ================================================

# Cache de configuración
# ⚠️ IMPORTANTE: Ejecutar "php artisan config:cache" después de cambios
CONFIG_CACHE_ENABLED=true

# Cache de rutas
ROUTE_CACHE_ENABLED=true

# Optimización de autoloader
COMPOSER_OPTIMIZE_AUTOLOAD=true

# ================================================
# 14. TIMEZONE Y LOCALE
# ================================================

# Zona horaria
# Colombia: America/Bogota
# México: America/Mexico_City
# España: Europe/Madrid
APP_TIMEZONE=America/Bogota

# Locale
# Español: es
# Inglés: en
APP_LOCALE=es

# Fallback locale
APP_FALLBACK_LOCALE=en

# ================================================
# 15. OTRAS CONFIGURACIONES
# ================================================

# Modo mantenimiento
# true = Sitio en mantenimiento
# false = Sitio activo
MAINTENANCE_MODE=false

# Debug bar (solo desarrollo)
# ⚠️ CRÍTICO: DEBE ser "false" en producción
DEBUGBAR_ENABLED=false

# Telescope (solo staging)
# ⚠️ IMPORTANTE: DEBE ser "false" en producción (consume recursos)
TELESCOPE_ENABLED=false

# ================================================
# NOTAS IMPORTANTES
# ================================================
# 1. Generar APP_KEY: docker-compose exec api php artisan key:generate --show
# 2. Generar contraseñas: openssl rand -base64 32
# 3. Verificar dominios en Resend antes de enviar emails
# 4. Cambiar ePayco a modo producción (EPAYCO_TEST=false)
# 5. Configurar backups automáticos
# 6. Monitorear logs regularmente
# 7. NO compartir este archivo con valores reales
# 8. Usar gestor de secretos en cloud (AWS Secrets Manager, etc)
# ================================================
