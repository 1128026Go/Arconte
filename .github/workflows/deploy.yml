name: Deploy

on:
  push:
    branches: [ staging, main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  # ==========================================
  # Deploy to Staging
  # ==========================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging.arconte.app

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: apps/web/package-lock.json

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          tools: composer

      - name: Install frontend dependencies
        working-directory: apps/web
        run: npm ci

      - name: Build frontend for staging
        working-directory: apps/web
        env:
          VITE_API_URL: ${{ secrets.STAGING_API_URL }}
          VITE_APP_NAME: Arconte (Staging)
          VITE_APP_URL: https://staging.arconte.app
        run: npm run build

      - name: Install backend dependencies
        working-directory: apps/api_php
        run: composer install --prefer-dist --no-progress --no-interaction --no-dev --optimize-autoloader

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          port: ${{ secrets.STAGING_PORT }}
          script: |
            cd ${{ secrets.STAGING_PATH }}

            # Pull latest code
            git pull origin staging

            # Backend deployment
            cd apps/api_php
            composer install --no-dev --optimize-autoloader
            php artisan down --message="Deploying updates" --retry=60
            php artisan migrate --force
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache
            php artisan event:cache
            php artisan optimize
            php artisan queue:restart
            php artisan up

            # Frontend deployment
            cd ../web
            npm ci
            npm run build

            # Restart services
            sudo systemctl restart php8.4-fpm
            sudo systemctl reload nginx

            echo "‚úÖ Deployment to staging completed"

      - name: Health check
        run: |
          sleep 10
          response=$(curl -f -s -o /dev/null -w "%{http_code}" https://staging.arconte.app/api/health || echo "000")
          if [ "$response" = "200" ]; then
            echo "‚úÖ Health check passed"
          else
            echo "‚ùå Health check failed with status: $response"
            exit 1
          fi

      - name: Notify deployment
        if: success()
        run: |
          echo "## ‚úÖ Staging Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Environment: Staging" >> $GITHUB_STEP_SUMMARY
          echo "- Branch: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- URL: https://staging.arconte.app" >> $GITHUB_STEP_SUMMARY

  # ==========================================
  # Deploy to Production
  # ==========================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://arconte.app
    needs: []

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: apps/web/package-lock.json

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          tools: composer

      - name: Install frontend dependencies
        working-directory: apps/web
        run: npm ci

      - name: Build frontend for production
        working-directory: apps/web
        env:
          VITE_API_URL: ${{ secrets.PRODUCTION_API_URL }}
          VITE_APP_NAME: Arconte
          VITE_APP_URL: https://arconte.app
        run: npm run build

      - name: Install backend dependencies
        working-directory: apps/api_php
        run: composer install --prefer-dist --no-progress --no-interaction --no-dev --optimize-autoloader

      - name: Create backup before deployment
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_PORT }}
          script: |
            cd ${{ secrets.PRODUCTION_PATH }}
            timestamp=$(date +%Y%m%d_%H%M%S)
            mkdir -p ../backups
            tar -czf "../backups/backup_${timestamp}.tar.gz" .
            echo "‚úÖ Backup created: backup_${timestamp}.tar.gz"

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_PORT }}
          script: |
            cd ${{ secrets.PRODUCTION_PATH }}

            # Pull latest code
            git pull origin main

            # Backend deployment
            cd apps/api_php
            composer install --no-dev --optimize-autoloader
            php artisan down --message="Deploying updates" --retry=60
            php artisan migrate --force
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache
            php artisan event:cache
            php artisan optimize
            php artisan queue:restart
            php artisan up

            # Frontend deployment
            cd ../web
            npm ci
            npm run build

            # Restart services
            sudo systemctl restart php8.4-fpm
            sudo systemctl reload nginx

            echo "‚úÖ Deployment to production completed"

      - name: Health check
        run: |
          sleep 10
          response=$(curl -f -s -o /dev/null -w "%{http_code}" https://arconte.app/api/health || echo "000")
          if [ "$response" = "200" ]; then
            echo "‚úÖ Health check passed"
          else
            echo "‚ùå Health check failed with status: $response"
            exit 1
          fi

      - name: Notify deployment
        if: success()
        run: |
          echo "## ‚úÖ Production Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Environment: Production" >> $GITHUB_STEP_SUMMARY
          echo "- Branch: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- URL: https://arconte.app" >> $GITHUB_STEP_SUMMARY

      - name: Rollback on failure
        if: failure()
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_PORT }}
          script: |
            cd ${{ secrets.PRODUCTION_PATH }}

            # Find latest backup
            latest_backup=$(ls -t ../backups/backup_*.tar.gz | head -1)

            if [ -n "$latest_backup" ]; then
              echo "üîÑ Rolling back to: $latest_backup"

              # Extract backup
              tar -xzf "$latest_backup" -C .

              # Restart services
              cd apps/api_php
              php artisan up
              sudo systemctl restart php8.4-fpm
              sudo systemctl reload nginx

              echo "‚úÖ Rollback completed"
            else
              echo "‚ùå No backup found for rollback"
              exit 1
            fi

  # ==========================================
  # Database Backup (Production only)
  # ==========================================
  backup-database:
    name: Backup Production Database
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Backup database via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_PORT }}
          script: |
            timestamp=$(date +%Y%m%d_%H%M%S)
            mkdir -p ~/db_backups

            # Backup PostgreSQL database
            PGPASSWORD="${{ secrets.DB_PASSWORD }}" pg_dump \
              -h localhost \
              -U ${{ secrets.DB_USERNAME }} \
              -d ${{ secrets.DB_DATABASE }} \
              -F c \
              -f ~/db_backups/arconte_${timestamp}.dump

            # Keep only last 7 days of backups
            find ~/db_backups -name "arconte_*.dump" -mtime +7 -delete

            echo "‚úÖ Database backup created: arconte_${timestamp}.dump"
