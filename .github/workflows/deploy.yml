name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: arconte_test
          POSTGRES_USER: arconte
          POSTGRES_PASSWORD: secret
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: pdo, pdo_pgsql, redis
          coverage: none

      - name: Install Dependencies
        working-directory: apps/api_php
        run: |
          composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: Run Migrations
        working-directory: apps/api_php
        env:
          DB_CONNECTION: pgsql
          DB_HOST: localhost
          DB_PORT: 5432
          DB_DATABASE: arconte_test
          DB_USERNAME: arconte
          DB_PASSWORD: secret
        run: |
          php artisan migrate --force

      - name: Run Tests
        working-directory: apps/api_php
        env:
          DB_CONNECTION: pgsql
          DB_HOST: localhost
          DB_DATABASE: arconte_test
        run: |
          php artisan test

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: test
    name: Build and Deploy

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: apps/web/package-lock.json

      - name: Build Frontend
        working-directory: apps/web
        run: |
          npm ci
          npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker images
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build API
          docker build -t $ECR_REGISTRY/arconte-api:$IMAGE_TAG ./apps/api_php
          docker push $ECR_REGISTRY/arconte-api:$IMAGE_TAG

          # Build Web
          docker build -t $ECR_REGISTRY/arconte-web:$IMAGE_TAG ./apps/web
          docker push $ECR_REGISTRY/arconte-web:$IMAGE_TAG

          # Build Ingest
          docker build -t $ECR_REGISTRY/arconte-ingest:$IMAGE_TAG ./apps/ingest_py
          docker push $ECR_REGISTRY/arconte-ingest:$IMAGE_TAG

      - name: Deploy to ECS
        run: |
          aws ecs update-service --cluster arconte-production \
            --service arconte-api --force-new-deployment

          aws ecs update-service --cluster arconte-production \
            --service arconte-web --force-new-deployment

          aws ecs update-service --cluster arconte-production \
            --service arconte-ingest --force-new-deployment

      - name: Run Database Migrations
        run: |
          aws ecs run-task --cluster arconte-production \
            --task-definition arconte-migrate \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[subnet-xxx],securityGroups=[sg-xxx],assignPublicIp=ENABLED}"

      - name: Invalidate CloudFront Cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"

      - name: Notify Deployment
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          text: 'Deployment to production: ${{ job.status }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow

  health-check:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    name: Health Check

    steps:
      - name: Wait for deployment
        run: sleep 30

      - name: Check API Health
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" https://api.arconte.com/health)
          if [ $response -eq 200 ]; then
            echo "API is healthy ✓"
          else
            echo "API health check failed with status: $response"
            exit 1
          fi

      - name: Check Web Health
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" https://arconte.com/health)
          if [ $response -eq 200 ]; then
            echo "Web is healthy ✓"
          else
            echo "Web health check failed with status: $response"
            exit 1
          fi

      - name: Run Smoke Tests
        run: |
          # Test login endpoint
          curl -X POST https://api.arconte.com/api/auth/login \
            -H "Content-Type: application/json" \
            -d '{"email":"test@arconte.com","password":"test123"}' \
            -f || exit 1

          echo "Smoke tests passed ✓"
