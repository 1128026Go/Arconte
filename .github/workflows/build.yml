name: Build Production

on:
  push:
    branches: [ main, staging ]
  pull_request:
    branches: [ main ]

jobs:
  # ==========================================
  # Frontend Build (React + Vite)
  # ==========================================
  frontend-build:
    name: Build Frontend (React + Vite)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: apps/web/package-lock.json

      - name: Install dependencies
        working-directory: apps/web
        run: npm ci

      - name: Build production bundle
        working-directory: apps/web
        env:
          VITE_API_URL: https://api.arconte.app/api
          VITE_APP_NAME: Arconte
          VITE_APP_URL: https://arconte.app
        run: npm run build

      - name: Check build output
        working-directory: apps/web
        run: |
          ls -lah dist/
          du -sh dist/
          echo "## Build Stats" >> $GITHUB_STEP_SUMMARY
          echo "Total size: $(du -sh dist/ | cut -f1)" >> $GITHUB_STEP_SUMMARY

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: apps/web/dist/
          retention-days: 7

      - name: Analyze bundle size
        working-directory: apps/web
        run: |
          if [ -f "dist/assets/index-*.js" ]; then
            MAIN_JS_SIZE=$(du -h dist/assets/index-*.js | cut -f1)
            echo "Main JS bundle: $MAIN_JS_SIZE" >> $GITHUB_STEP_SUMMARY
          fi

  # ==========================================
  # Backend Build Check (Laravel)
  # ==========================================
  backend-build:
    name: Build Backend (Laravel)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          tools: composer

      - name: Get Composer Cache Directory
        id: composer-cache
        working-directory: apps/api_php
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('apps/api_php/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies (production)
        working-directory: apps/api_php
        run: composer install --prefer-dist --no-progress --no-interaction --no-dev --optimize-autoloader

      - name: Verify autoload optimization
        working-directory: apps/api_php
        run: |
          if [ -f "vendor/composer/autoload_classmap.php" ]; then
            echo "✅ Autoloader optimized"
          else
            echo "❌ Autoloader not optimized"
            exit 1
          fi

      - name: Check for production readiness
        working-directory: apps/api_php
        run: |
          echo "## Backend Build Check" >> $GITHUB_STEP_SUMMARY
          echo "- Composer dependencies: ✅ Installed" >> $GITHUB_STEP_SUMMARY
          echo "- Autoloader: ✅ Optimized" >> $GITHUB_STEP_SUMMARY

      - name: Upload vendor artifacts
        uses: actions/upload-artifact@v3
        with:
          name: backend-vendor
          path: apps/api_php/vendor/
          retention-days: 7

  # ==========================================
  # Python Service Build Check
  # ==========================================
  python-build:
    name: Build Python Service
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: apps/ingest_py/requirements.txt

      - name: Install dependencies
        working-directory: apps/ingest_py
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Verify imports
        working-directory: apps/ingest_py
        run: |
          python -c "from fastapi import FastAPI; print('✅ FastAPI installed')"
          python -c "import playwright; print('✅ Playwright installed')"
          python -c "import google.generativeai as genai; print('✅ Gemini SDK installed')"

      - name: Check for syntax errors
        working-directory: apps/ingest_py
        run: |
          python -m py_compile main.py || echo "Syntax errors found"
          echo "## Python Build Check" >> $GITHUB_STEP_SUMMARY
          echo "- Dependencies: ✅ Installed" >> $GITHUB_STEP_SUMMARY
          echo "- Syntax: ✅ Valid" >> $GITHUB_STEP_SUMMARY

  # ==========================================
  # Docker Build (Multi-stage)
  # ==========================================
  docker-build:
    name: Docker Build Check
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Check for Dockerfiles
        run: |
          if [ -f "Dockerfile" ] || [ -f "docker-compose.yml" ]; then
            echo "✅ Docker configuration found"
          else
            echo "ℹ️ No Docker configuration found, skipping"
            exit 0
          fi

      - name: Build Docker images (if exists)
        if: hashFiles('docker-compose.yml') != ''
        run: |
          docker-compose build --no-cache
        continue-on-error: true

  # ==========================================
  # Build Summary
  # ==========================================
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [frontend-build, backend-build, python-build]
    if: always()

    steps:
      - name: Check build results
        run: |
          echo "## Build Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend Build: ${{ needs.frontend-build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Backend Build: ${{ needs.backend-build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Python Build: ${{ needs.python-build.result }}" >> $GITHUB_STEP_SUMMARY

      - name: Fail if any build failed
        if: |
          needs.frontend-build.result == 'failure' ||
          needs.backend-build.result == 'failure' ||
          needs.python-build.result == 'failure'
        run: exit 1
