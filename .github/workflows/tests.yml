name: Tests

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # ==========================================
  # Backend Tests (Laravel + PHPUnit)
  # ==========================================
  backend-tests:
    name: Backend Tests (PHP 8.4)
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: arconte
          POSTGRES_PASSWORD: arconte_test_password
          POSTGRES_DB: arconte_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          extensions: pgsql, pdo_pgsql, redis, mbstring, xml, curl, zip
          coverage: xdebug

      - name: Copy .env.testing
        working-directory: apps/api_php
        run: |
          cp .env.example .env.testing
          echo "DB_CONNECTION=pgsql" >> .env.testing
          echo "DB_HOST=localhost" >> .env.testing
          echo "DB_PORT=5432" >> .env.testing
          echo "DB_DATABASE=arconte_test" >> .env.testing
          echo "DB_USERNAME=arconte" >> .env.testing
          echo "DB_PASSWORD=arconte_test_password" >> .env.testing
          echo "REDIS_HOST=localhost" >> .env.testing
          echo "REDIS_PORT=6379" >> .env.testing
          echo "CACHE_DRIVER=redis" >> .env.testing
          echo "SESSION_DRIVER=database" >> .env.testing
          echo "QUEUE_CONNECTION=database" >> .env.testing

      - name: Get Composer Cache Directory
        id: composer-cache
        working-directory: apps/api_php
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('apps/api_php/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        working-directory: apps/api_php
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Generate application key
        working-directory: apps/api_php
        run: php artisan key:generate --env=testing

      - name: Run database migrations
        working-directory: apps/api_php
        env:
          DB_CONNECTION: pgsql
          DB_HOST: localhost
          DB_PORT: 5432
          DB_DATABASE: arconte_test
          DB_USERNAME: arconte
          DB_PASSWORD: arconte_test_password
        run: php artisan migrate --env=testing --force

      - name: Run PHPUnit tests
        working-directory: apps/api_php
        run: php artisan test --parallel --coverage --min=70

      - name: Upload coverage reports
        if: always()
        uses: codecov/codecov-action@v3
        with:
          files: apps/api_php/coverage.xml
          flags: backend
          name: backend-coverage

  # ==========================================
  # Frontend Unit Tests (Vitest)
  # ==========================================
  frontend-unit-tests:
    name: Frontend Unit Tests (Node 18)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: apps/web/package-lock.json

      - name: Install dependencies
        working-directory: apps/web
        run: npm ci

      - name: Run unit tests with coverage
        working-directory: apps/web
        run: npm run test:coverage

      - name: Upload coverage reports
        if: always()
        uses: codecov/codecov-action@v3
        with:
          files: apps/web/coverage/coverage-final.json
          flags: frontend-unit
          name: frontend-unit-coverage

  # ==========================================
  # Frontend E2E Tests (Playwright)
  # ==========================================
  frontend-e2e-tests:
    name: Frontend E2E Tests (Playwright)
    runs-on: ubuntu-latest
    timeout-minutes: 15

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: arconte
          POSTGRES_PASSWORD: arconte_test_password
          POSTGRES_DB: arconte_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP (for backend)
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          extensions: pgsql, pdo_pgsql

      - name: Setup Node.js (for frontend)
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: apps/web/package-lock.json

      - name: Install backend dependencies
        working-directory: apps/api_php
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Setup backend .env
        working-directory: apps/api_php
        run: |
          cp .env.example .env
          echo "DB_CONNECTION=pgsql" >> .env
          echo "DB_HOST=localhost" >> .env
          echo "DB_PORT=5432" >> .env
          echo "DB_DATABASE=arconte_test" >> .env
          echo "DB_USERNAME=arconte" >> .env
          echo "DB_PASSWORD=arconte_test_password" >> .env

      - name: Generate backend key and migrate
        working-directory: apps/api_php
        run: |
          php artisan key:generate
          php artisan migrate --force
          php artisan db:seed --class=TestUserSeeder --force || true

      - name: Start Laravel backend
        working-directory: apps/api_php
        run: php artisan serve --host=0.0.0.0 --port=8000 &

      - name: Wait for backend to be ready
        run: |
          timeout 30 bash -c 'until curl -f http://localhost:8000/api/health 2>/dev/null; do sleep 1; done' || true

      - name: Install frontend dependencies
        working-directory: apps/web
        run: npm ci

      - name: Install Playwright browsers
        working-directory: apps/web
        run: npx playwright install --with-deps chromium

      - name: Setup frontend .env
        working-directory: apps/web
        run: |
          echo "VITE_API_URL=http://localhost:8000/api" > .env
          echo "VITE_APP_URL=http://localhost:3000" >> .env
          echo "VITE_APP_NAME=Arconte" >> .env

      - name: Build frontend
        working-directory: apps/web
        run: npm run build

      - name: Start frontend server
        working-directory: apps/web
        run: npm run preview -- --port 3000 --host &

      - name: Wait for frontend to be ready
        run: |
          timeout 30 bash -c 'until curl -f http://localhost:3000 2>/dev/null; do sleep 1; done'

      - name: Run Playwright E2E tests
        working-directory: apps/web
        env:
          VITE_API_URL: http://localhost:8000/api
          VITE_APP_URL: http://localhost:3000
        run: npx playwright test

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: apps/web/playwright-report/
          retention-days: 7

      - name: Upload Playwright screenshots
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-screenshots
          path: apps/web/test-results/
          retention-days: 7

  # ==========================================
  # Python Ingest Service Tests
  # ==========================================
  python-tests:
    name: Python Tests (Python 3.11)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: apps/ingest_py/requirements.txt

      - name: Install dependencies
        working-directory: apps/ingest_py
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio

      - name: Run Python tests
        working-directory: apps/ingest_py
        run: |
          # Si tienes tests en apps/ingest_py/tests/
          pytest tests/ --cov=. --cov-report=xml || echo "No tests found, skipping"

      - name: Upload coverage reports
        if: always()
        uses: codecov/codecov-action@v3
        with:
          files: apps/ingest_py/coverage.xml
          flags: python
          name: python-coverage
        continue-on-error: true

  # ==========================================
  # Test Summary
  # ==========================================
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-unit-tests, frontend-e2e-tests, python-tests]
    if: always()

    steps:
      - name: Check test results
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Backend Tests: ${{ needs.backend-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend Unit Tests: ${{ needs.frontend-unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend E2E Tests: ${{ needs.frontend-e2e-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Python Tests: ${{ needs.python-tests.result }}" >> $GITHUB_STEP_SUMMARY

      - name: Fail if any test failed
        if: |
          needs.backend-tests.result == 'failure' ||
          needs.frontend-unit-tests.result == 'failure' ||
          needs.frontend-e2e-tests.result == 'failure'
        run: exit 1
