name: Linting

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # ==========================================
  # PHP Linting (Laravel Pint)
  # ==========================================
  php-lint:
    name: PHP Code Style (Laravel Pint)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          tools: composer

      - name: Get Composer Cache Directory
        id: composer-cache
        working-directory: apps/api_php
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('apps/api_php/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        working-directory: apps/api_php
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Run Laravel Pint (dry-run)
        working-directory: apps/api_php
        run: ./vendor/bin/pint --test

  # ==========================================
  # PHPStan (Static Analysis)
  # ==========================================
  phpstan:
    name: PHPStan Static Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          tools: composer

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('apps/api_php/composer.lock') }}

      - name: Install Composer dependencies
        working-directory: apps/api_php
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Run PHPStan
        working-directory: apps/api_php
        run: |
          # Si tienes PHPStan configurado
          if [ -f phpstan.neon ]; then
            ./vendor/bin/phpstan analyse || echo "PHPStan not configured, skipping"
          else
            echo "PHPStan not configured, skipping"
          fi
        continue-on-error: true

  # ==========================================
  # JavaScript/TypeScript Linting (ESLint)
  # ==========================================
  js-lint:
    name: JavaScript/TypeScript Linting (ESLint)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: apps/web/package-lock.json

      - name: Install dependencies
        working-directory: apps/web
        run: npm ci

      - name: Run ESLint
        working-directory: apps/web
        run: npm run lint
        continue-on-error: false

  # ==========================================
  # Prettier (Code Formatting)
  # ==========================================
  prettier:
    name: Code Formatting (Prettier)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: apps/web/package-lock.json

      - name: Install dependencies
        working-directory: apps/web
        run: npm ci

      - name: Run Prettier check
        working-directory: apps/web
        run: npx prettier --check "src/**/*.{js,jsx,ts,tsx,css,json}"

  # ==========================================
  # Python Linting (Black, Flake8, isort)
  # ==========================================
  python-lint:
    name: Python Linting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 isort mypy

      - name: Run Black (formatting check)
        working-directory: apps/ingest_py
        run: black --check . || echo "Black formatting issues found"
        continue-on-error: true

      - name: Run Flake8 (style check)
        working-directory: apps/ingest_py
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || echo "Flake8 issues found"
        continue-on-error: true

      - name: Run isort (import sorting)
        working-directory: apps/ingest_py
        run: isort --check-only . || echo "Import sorting issues found"
        continue-on-error: true

      - name: Run mypy (type checking)
        working-directory: apps/ingest_py
        run: mypy . --ignore-missing-imports || echo "Type checking issues found"
        continue-on-error: true

  # ==========================================
  # Markdown Linting (Optional)
  # ==========================================
  markdown-lint:
    name: Markdown Linting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install markdownlint-cli
        run: npm install -g markdownlint-cli

      - name: Run markdownlint
        run: |
          markdownlint '**/*.md' --ignore node_modules --ignore vendor || echo "Markdown linting issues found"
        continue-on-error: true

  # ==========================================
  # Security Audit
  # ==========================================
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: apps/web/package-lock.json

      - name: Run npm audit (frontend)
        working-directory: apps/web
        run: npm audit --audit-level=high
        continue-on-error: true

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'

      - name: Install Composer dependencies
        working-directory: apps/api_php
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Run composer audit (backend)
        working-directory: apps/api_php
        run: composer audit
        continue-on-error: true

  # ==========================================
  # Lint Summary
  # ==========================================
  lint-summary:
    name: Lint Summary
    runs-on: ubuntu-latest
    needs: [php-lint, js-lint, prettier, python-lint]
    if: always()

    steps:
      - name: Check lint results
        run: |
          echo "## Linting Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- PHP Linting (Pint): ${{ needs.php-lint.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- JavaScript Linting (ESLint): ${{ needs.js-lint.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Code Formatting (Prettier): ${{ needs.prettier.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Python Linting: ${{ needs.python-lint.result }}" >> $GITHUB_STEP_SUMMARY

      - name: Fail if critical linters failed
        if: |
          needs.php-lint.result == 'failure' ||
          needs.js-lint.result == 'failure' ||
          needs.prettier.result == 'failure'
        run: exit 1
